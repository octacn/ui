{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "file-uploader",
  "type": "registry:component",
  "files": [
    {
      "path": "registry/components/file-uploader.tsx",
      "content": "\"use client\";\r\n\r\nimport { Card, CardContent, CardFooter, CardHeader } from \"@/components/ui/card\";\r\nimport { motion, AnimatePresence } from \"motion/react\";\r\nimport { useState, useCallback } from \"react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ninterface UploadedFile {\r\n  id: string;\r\n  file: File;\r\n  preview: string;\r\n  progress: number;\r\n  isUploading: boolean;\r\n  isComplete: boolean;\r\n}\r\n\r\n/**\r\n * The props is used\r\n *\r\n * @public\r\n */\r\ninterface ImageUploaderProps {\r\n  className?: string;\r\n  maxFiles?: number;\r\n  maxSize?: number;\r\n  onUploadComplete?: (files: File[]) => void;\r\n  onCancel?: () => void;\r\n  onPublish?: (files: File[]) => void;\r\n}\r\n\r\nexport const FileUploader: React.FC<ImageUploaderProps> = ({\r\n  maxFiles = 10,\r\n  maxSize = 20 * 1024 * 1024,\r\n  onUploadComplete,\r\n  onCancel,\r\n  onPublish,\r\n  className,\r\n}) => {\r\n  const [uploadedFiles, setUploadedFiles] = useState<UploadedFile[]>([\r\n    {\r\n      id: \"demo-1\",\r\n      file: new File([\"\"], \"demo.jpg\", { type: \"image/jpeg\" }),\r\n      preview: \"/images/blocks/sidebar-structure.png\",\r\n      progress: 100,\r\n      isUploading: false,\r\n      isComplete: true,\r\n    },\r\n  ]);\r\n\r\n  const simulateUpload = useCallback((fileId: string) => {\r\n    const updateProgress = () => {\r\n      setUploadedFiles((prev) =>\r\n        prev.map((file) => {\r\n          if (file.id === fileId && file.isUploading) {\r\n            const increment = Math.random() * 15 + 5;\r\n            const newProgress = Math.min(file.progress + increment, 100);\r\n            const isComplete = newProgress >= 100;\r\n\r\n            return {\r\n              ...file,\r\n              progress: newProgress,\r\n              isUploading: !isComplete,\r\n              isComplete,\r\n            };\r\n          }\r\n          return file;\r\n        })\r\n      );\r\n    };\r\n\r\n    const interval = setInterval(() => {\r\n      setUploadedFiles((prev) => {\r\n        const file = prev.find((f) => f.id === fileId);\r\n        if (!file || !file.isUploading) {\r\n          clearInterval(interval);\r\n          return prev;\r\n        }\r\n        updateProgress();\r\n        return prev;\r\n      });\r\n    }, 200);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const onDrop = useCallback(\r\n    (acceptedFiles: File[]) => {\r\n      const newFiles: UploadedFile[] = acceptedFiles.map((file) => ({\r\n        id: Math.random().toString(36),\r\n        file,\r\n        preview: URL.createObjectURL(file),\r\n        progress: 0,\r\n        isUploading: true,\r\n        isComplete: false,\r\n      }));\r\n\r\n      setUploadedFiles((prev) => {\r\n        const filteredPrev = prev.filter((f) => !f.id.startsWith(\"demo-\"));\r\n\r\n        return [...newFiles, ...filteredPrev];\r\n      });\r\n\r\n      newFiles.forEach((file) => {\r\n        setTimeout(() => simulateUpload(file.id), Math.random() * 500);\r\n      });\r\n\r\n      setTimeout(() => {\r\n        setUploadedFiles((prev) => {\r\n          const allFiles = prev.map((f) => f.file);\r\n          onUploadComplete?.(allFiles);\r\n          return prev;\r\n        });\r\n      }, 3000);\r\n    },\r\n    [simulateUpload, onUploadComplete]\r\n  );\r\n\r\n  const removeFile = useCallback((fileId: string) => {\r\n    setUploadedFiles((prev) => {\r\n      const fileToRemove = prev.find((f) => f.id === fileId);\r\n      if (fileToRemove) {\r\n        URL.revokeObjectURL(fileToRemove.preview);\r\n      }\r\n      return prev.filter((f) => f.id !== fileId);\r\n    });\r\n  }, []);\r\n\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n    onDrop,\r\n    accept: {\r\n      \"image/*\": [\".jpeg\", \".jpg\", \".png\", \".gif\", \".webp\"],\r\n    },\r\n    maxSize,\r\n    maxFiles,\r\n    multiple: true,\r\n  });\r\n\r\n  const handleCancel = () => {\r\n    uploadedFiles.forEach((file) => {\r\n      URL.revokeObjectURL(file.preview);\r\n    });\r\n    setUploadedFiles([]);\r\n    onCancel?.();\r\n  };\r\n\r\n  const handlePublish = () => {\r\n    const completedFiles = uploadedFiles\r\n      .filter((f) => f.isComplete)\r\n      .map((f) => f.file);\r\n    onPublish?.(completedFiles);\r\n  };\r\n\r\n  return (\r\n    <Card className={cn(\"max-w-sm w-sm bg-surface\", className)}>\r\n      <CardHeader {...getRootProps()}>\r\n        <motion.div\r\n          className={cn(\r\n            \"relative border border-dashed rounded-xl py-14 text-center cursor-pointer transition-all duration-200 overflow-hidden flex flex-col items-center justify-center\",\r\n            isDragActive\r\n              ? \"border-blue-400\"\r\n              : \"border-blue-400  hover:border-gray-400\"\r\n          )}\r\n          variants={{\r\n            initial: { x: 0, y: 0, opacity: 1 },\r\n            hover: {\r\n              x: 4,\r\n              y: 6,\r\n              opacity: 0.95,\r\n              transition: { duration: 0.1 },\r\n            },\r\n            tap: {\r\n              scale: 0.97,\r\n              transition: { duration: 0.1 },\r\n            },\r\n          }}\r\n          initial=\"initial\"\r\n          whileHover=\"hover\"\r\n          whileTap=\"tap\"\r\n          role=\"button\"\r\n          aria-label=\"Upload images by clicking or dragging and dropping\"\r\n        >\r\n          <input {...getInputProps()} aria-describedby=\"upload-description\" />\r\n\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            viewBox=\"0 0 24 24\"\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            strokeWidth=\"2\"\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            className=\"size-10 text-muted-foreground\"\r\n          >\r\n            <path d=\"M12 13v8\" />\r\n            <path d=\"M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242\" />\r\n            <path d=\"m8 17 4-4 4 4\" />\r\n          </svg>\r\n\r\n          <p className=\"text-base text-foreground/90 tracking-tight font-inter mt-1\">\r\n            Upload Images\r\n          </p>\r\n          <p className=\"text-muted-foreground\">or drag and drop</p>\r\n\r\n          <p\r\n            id=\"upload-description\"\r\n            className=\"text-sm text-muted-foreground mt-1\"\r\n          >\r\n            [Max. File size: {Math.round(maxSize / (1024 * 1024))}MB]\r\n          </p>\r\n        </motion.div>\r\n      </CardHeader>\r\n\r\n      <CardContent>\r\n        <h4 className=\"text-muted-foreground font-inter tracking-wide capitalize pb-2\">\r\n          Images uploaded\r\n        </h4>\r\n        <AnimatePresence>\r\n          {uploadedFiles.length > 0 && (\r\n            <motion.div\r\n              initial={{ opacity: 0, height: 0 }}\r\n              animate={{ opacity: 1, height: \"auto\" }}\r\n              exit={{ opacity: 0, height: 0 }}\r\n              transition={{ duration: 0.3 }}\r\n            >\r\n              <div className=\"flex gap-3 overflow-x-auto no-scrollbar\">\r\n                {uploadedFiles.map((file) => (\r\n                  <motion.div\r\n                    key={file.id}\r\n                    initial={{ opacity: 0, scale: 0.8 }}\r\n                    animate={{ opacity: 1, scale: 1 }}\r\n                    exit={{ opacity: 0, scale: 0.8 }}\r\n                    transition={{ duration: 0.2 }}\r\n                    className=\"relative group aspect-square size-30 rounded-md overflow-hidden shadow-sm flex-shrink-0\"\r\n                  >\r\n                    <div className=\"relative w-full h-full rounded-lg overflow-hidden\">\r\n                      <img\r\n                        src={file.preview || \"/placeholder.svg\"}\r\n                        alt={`Uploaded ${file.file.name}`}\r\n                        className=\"w-full h-full object-cover\"\r\n                      />\r\n                      {file.isUploading && (\r\n                        <div className=\"absolute inset-0 backdrop-blur-xs bg-foreground/1 flex items-center justify-center\">\r\n                          <div className=\"w-12 h-12 relative\">\r\n                            <svg\r\n                              className=\"w-12 h-12 transform -rotate-90 text-white/85\"\r\n                              viewBox=\"0 0 36 36\"\r\n                            >\r\n                              <path\r\n                                stroke=\"currentColor\"\r\n                                strokeWidth=\"3\"\r\n                                fill=\"none\"\r\n                                d=\"M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831\"\r\n                              />\r\n                              <motion.path\r\n                                stroke=\"currentColor\"\r\n                                strokeWidth=\"2\"\r\n                                fill=\"none\"\r\n                                strokeLinecap=\"round\"\r\n                                d=\"M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831\"\r\n                                initial={{ strokeDasharray: \"0 100\" }}\r\n                                animate={{\r\n                                  strokeDasharray: `${file.progress} 100`,\r\n                                }}\r\n                                transition={{ duration: 0.2, ease: \"easeOut\" }}\r\n                              />\r\n                            </svg>\r\n\r\n                            <p className=\"absolute inset-0 flex items-center justify-center text-xs text-white/90\">\r\n                              {Math.round(file.progress)}%\r\n                            </p>\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n\r\n                      <motion.button\r\n                        initial={{ opacity: 0 }}\r\n                        animate={{ opacity: file.isComplete ? 1 : 0 }}\r\n                        onClick={(e) => {\r\n                          e.stopPropagation();\r\n                          removeFile(file.id);\r\n                        }}\r\n                        className=\"absolute top-0 right-0 w-6 h-6 bg-red-500/90 flex items-center justify-center hover:bg-red-600 transition-colors\"\r\n                        aria-label={`Remove ${file.file.name}`}\r\n                      >\r\n                        <svg\r\n                          xmlns=\"http://www.w3.org/2000/svg\"\r\n                          viewBox=\"0 0 24 24\"\r\n                          fill=\"none\"\r\n                          stroke=\"currentColor\"\r\n                          strokeWidth=\"2\"\r\n                          strokeLinecap=\"round\"\r\n                          strokeLinejoin=\"round\"\r\n                          className=\"size-4 text-white/80\"\r\n                        >\r\n                          <path d=\"M18 6 6 18\" />\r\n                          <path d=\"m6 6 12 12\" />\r\n                        </svg>\r\n                      </motion.button>\r\n                    </div>\r\n                  </motion.div>\r\n                ))}\r\n              </div>\r\n            </motion.div>\r\n          )}\r\n        </AnimatePresence>\r\n\r\n        {uploadedFiles.length === 0 && (\r\n          <motion.p\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1 }}\r\n            className=\"text-center font-inter text-muted-foreground\"\r\n          >\r\n            No images uploaded here\r\n          </motion.p>\r\n        )}\r\n      </CardContent>\r\n\r\n      <div className=\"w-full border border-dashed\" />\r\n\r\n      <CardFooter className=\"grid grid-cols-2 gap-4\">\r\n        <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>\r\n          <Button onClick={handleCancel} className=\"w-full\">\r\n            Cancel\r\n          </Button>\r\n        </motion.div>\r\n\r\n        <motion.div\r\n          whileHover={{ scale: 1.02 }}\r\n          whileTap={{ scale: 0.98 }}\r\n          onClick={handlePublish}\r\n        >\r\n          <Button\r\n            variant={\"secondary\"}\r\n            disabled={\r\n              uploadedFiles.length === 0 ||\r\n              uploadedFiles.some((f) => f.isUploading)\r\n            }\r\n            className=\"w-full\"\r\n          >\r\n            Publish\r\n          </Button>\r\n        </motion.div>\r\n      </CardFooter>\r\n    </Card>\r\n  );\r\n};\r\n",
      "type": "registry:component",
      "target": "components/file-uploader.tsx"
    }
  ]
}