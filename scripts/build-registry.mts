import { exec } from "child_process";
import { promises as fs } from "fs";
import { rimraf } from "rimraf";
import path from "path";

import { convertRegistryPaths, hasRegistryPaths, sleep } from "../lib/utils";
import { getAllBlocks } from "../lib/blocks";
import { registry } from "../registry/items/index";

async function buildRegistryIndex() {
  let index = `/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import * as React from "react"

export const Index: Record<string, any> = {`;

  for (const item of registry.items) {
    const resolveFiles = item.files?.map(
      (file: any) => `registry/${file.path}`
    );
    if (!resolveFiles) {
      continue;
    }

    const componentPath = item.files?.[0]?.path
      ? `@/registry/${item.files[0].path}`
      : "";

    index += `
  "${item.name}": {
    name: "${item.name}",
    description: "${item.description ?? ""}",
    type: "${item.type}",
    registryDependencies: ${JSON.stringify(item.registryDependencies)},
    files: [${item.files?.map((file: any) => {
      const filePath = `registry/${
        typeof file === "string" ? file : file.path
      }`;
      const resolvedFilePath = path.resolve(filePath);
      return typeof file === "string"
        ? `"${resolvedFilePath}"`
        : `{
      path: "${filePath}",
      type: "${file.type}",
      target: "${file.target ?? ""}"
    }`;
    })}],
    component: ${
      componentPath
        ? `React.lazy(async () => {
      const mod = await import("${componentPath}")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    })`
        : "null"
    },
    categories: ${JSON.stringify(item.categories)},
    meta: ${JSON.stringify(item.meta)},
  },`;
  }

  index += `
  }`;

  console.log(`#️⃣  ${Object.keys(registry.items).length} items found`);

  // Write style index.
  rimraf.sync(path.join(process.cwd(), "registry/__index__.tsx"));
  await fs.writeFile(path.join(process.cwd(), "registry/__index__.tsx"), index);
}

async function buildRegistryJsonFile() {
  // 1. Fix the path for registry items.
  const fixedRegistry = {
    ...registry,
    items: registry.items.map((item: any) => {
      const files = item.files?.map((file: any) => {
        return {
          ...file,
          path: `registry/${file.path}`,
        };
      });

      return {
        ...item,
        files,
      };
    }),
  };

  // 2. Write the content of the registry to `registry.json`
  rimraf.sync(path.join(process.cwd(), `registry.json`));
  await fs.writeFile(
    path.join(process.cwd(), `registry.json`),
    JSON.stringify(fixedRegistry, null, 2)
  );

  // 3. Copy the registry.json to the registry.json directory.
  await fs.cp(
    path.join(process.cwd(), "registry.json"),
    path.join(process.cwd(), "public", "r", "registries.json"),
    { recursive: true }
  );
}

async function syncRegistry() {
  // --- 1. Backup registry/__index__.tsx
  const registryDir = path.join(process.cwd(), "registry");
  const registryIndexPath = path.join(registryDir, "__index__.tsx");
  let registryContent = null;

  // const src = path.join(process.cwd(), "registry.json");
  // const dest = path.join(process.cwd(), "public", "r", "registries.json");

  // await fs.mkdir(path.dirname(dest), { recursive: true });
  // await fs.cp(src, dest);

  try {
    registryContent = await fs.readFile(registryIndexPath, "utf8");
  } catch {
    console.log("🗂️ registry/__index__.tsx not found");
  }
  // 1. Call pnpm registry:build for www.
  await exec("pnpm registry:build");

  // 3. Restore the registry content if we had it
  if (registryContent) {
    await fs.writeFile(registryIndexPath, registryContent, "utf8");
  }
}

async function updateRegistryPath() {
  const rDir = path.join(process.cwd(), "public", "r");
  const files = await fs.readdir(rDir);

  const updatedFiles: string[] = [];
  const skippedFiles: string[] = [];

  for (const fileName of files) {
    if (!fileName.endsWith(".json")) continue;

    const filePath = path.join(rDir, fileName);

    // Read JSON
    const content = await fs.readFile(filePath, "utf-8");
    const data = JSON.parse(content);

    let shouldUpdate = false;

    if (Array.isArray(data.files)) {
      data.files = data.files.map((file: any) => {
        if (
          typeof file.content === "string" &&
          hasRegistryPaths(file.content)
        ) {
          shouldUpdate = true;
          file.content = convertRegistryPaths(file.content);
        }
        return file;
      });
    }

    if (shouldUpdate) {
      await fs.writeFile(filePath, JSON.stringify(data, null, 2), "utf-8");
      updatedFiles.push(filePath);
    } else {
      skippedFiles.push(filePath);
    }
  }

  // Log all updated first
  updatedFiles.forEach((f) => console.log("✅ Updated imports in:", f));
  console.log(
    "========================================================================="
  );
  // Then log skipped
  skippedFiles.forEach((f) =>
    console.log("⏩ Skipped (no registry paths):", f)
  );
}

async function buildBlocksIndex() {
  const blocks = await getAllBlocks(["registry:block"]);

  const payload = blocks.map((block) => ({
    name: block.name,
    description: block.description,
    categories: block.categories,
  }));

  rimraf.sync(path.join(process.cwd(), "registry/__blocks__.json"));
  await fs.writeFile(
    path.join(process.cwd(), "registry/__blocks__.json"),
    JSON.stringify(payload, null, 2)
  );
}

try {
  console.log("🗂️ Building registry/__index__.tsx...");
  await buildRegistryIndex();
  console.log("🥳 Completed registry/__index__.tsx...");

  console.log("--------------------------------------");

  console.log("💅 Building registry.json...");
  await buildRegistryJsonFile();
  console.log("🥳 Completed Building registry.json...");

  console.log("--------------------------------------");

  console.log("🔄 Syncing registry...");
  await syncRegistry();
  console.log("🥳 Completed Syncing registry...");

  console.log("--------------------------------------");

  console.log("⏳ Waiting 5 seconds before updating registry paths...");
  await sleep(5000);

  console.log("--------------------------------------");

  console.log("🔄 updateRegistryPath registry...");
  await updateRegistryPath();
  console.log("🥳 Completed updateRegistryPath registry...");

  console.log("--------------------------------------");

  console.log(
    "⏳ Waiting more 3 seconds before building registry/__blocks__.json..."
  );
  await sleep(3000);

  console.log("🗂️ Building registry/__blocks__.json...");
  await buildBlocksIndex();
  console.log("🥳 Completed Building registry/__blocks__.json...");

  console.log("🥳 Completed all process check the changes...");
} catch (error) {
  console.error(error);
  process.exit(1);
}
